#pragma once
#include"Matrix.h"
#include<iostream>

// Задча разбивается на 2 пункта
// 1) является ли точка видимой для другой точки
// 2) переобор точек(зачений матрицы) для определения всех видимых точек (или какой-то видимой области)
// точка А является видимой для точки В если прямую между высотами этимх точек
// не перекрывают высоты других точек
// но так как набор точек дискретный мы не можем сказать пересекает ли прямая между точками другие объекты
// поэтому мы хотим чтобы прямая проходила через как можно большее количество точек или находилась достаточно 
// близко к этим точкам чтобы мы могли представлять эти точки как точки на прямой
// в классе реализовал стандартный проход по массиву(round1) и проход по диагоналям(round2)
// видимость точки определял 2 способами
// 1) составил уравнение прямой между точками взяв индексы как координаты далее подставляя индескы строк
// определил самые близкие индексы столбцов к прямой и после определял могут ли высоты этих точек пересечь прямую
// если да то точка являестся невидимой (is_visible1)
// 2) второй способ легче описывается на примере
// есть квадратная матрица NxN в ее левом нижнем углу находится точка-обозреватель а в крайнем правом столбце обозримая точка
// для нахождения точек близких к прямой построим путь от обозримой точки до обозревателя
// если обозримая точка находится в нижней части матицы берем элемент слева от него если в верхней то слева снизу 
// уменьшаем размер матрицы на 1 и повторяем операцию пока не прийдем к нижнему левому углу и рамер матрицы будет 1
// таким образом мы получили последовательность точек лежащих в близи прямой (is_visible2)
class Version1
{
private:
	Matrix<int> data;
	Matrix<bool> result_data;
	int point_i_index;
	int point_j_index;
	void round1();
	void round2();
	bool is_visible1(int x, int y);
	bool is_visible2(int x, int y);
	double distance_ratio(int i1,int j1, int i2, int j2);
public:
	Version1(const Matrix<int>& d, int point_i_index, int point_j_index);
	Matrix<int> get_data();
	Matrix<bool> get_map_visibility();

};

